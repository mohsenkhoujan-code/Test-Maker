# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Installer.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(753, 627)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(221, 237, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 246, 247))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(111, 119, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(147, 158, 160))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(221, 237, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 246, 247))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(221, 237, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 246, 247))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(111, 119, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(147, 158, 160))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(221, 237, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 246, 247))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(111, 119, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(221, 237, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 246, 247))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(111, 119, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(147, 158, 160))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(111, 119, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(111, 119, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(221, 237, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(221, 237, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(221, 237, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        Form.setPalette(palette)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("DATA1/add.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Form.setWindowIcon(icon)
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(640, 580, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(20, 580, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setGeometry(QtCore.QRect(70, 520, 621, 41))
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(10, 510, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(10, 40, 731, 471))
        self.label_2.setFrameShape(QtWidgets.QFrame.Box)
        self.label_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label_2.setText("")
        self.label_2.setTextFormat(QtCore.Qt.PlainText)
        self.label_2.setPixmap(QtGui.QPixmap("DATA1/1.png"))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.frame_2 = QtWidgets.QFrame(Form)
        self.frame_2.setGeometry(QtCore.QRect(596, 450, 81, 51))
        self.frame_2.setFrameShape(QtWidgets.QFrame.Panel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.pushButton_5 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_5.setGeometry(QtCore.QRect(1, 1, 78, 48))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 63, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 63, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 63, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.pushButton_5.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("SimSun-ExtB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setAutoFillBackground(True)
        self.pushButton_5.setCheckable(False)
        self.pushButton_5.setFlat(True)
        self.pushButton_5.setObjectName("pushButton_5")
        self.frame = QtWidgets.QFrame(Form)
        self.frame.setGeometry(QtCore.QRect(80, 451, 81, 51))
        self.frame.setFrameShape(QtWidgets.QFrame.Panel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.pushButton_6 = QtWidgets.QPushButton(self.frame)
        self.pushButton_6.setGeometry(QtCore.QRect(1, 1, 78, 48))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 63, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 63, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 63, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.pushButton_6.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("SimSun-ExtB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setAutoFillBackground(True)
        self.pushButton_6.setCheckable(False)
        self.pushButton_6.setFlat(True)
        self.pushButton_6.setObjectName("pushButton_6")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(70, 515, 611, 51))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(10, 0, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setItalic(False)
        font.setUnderline(True)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.progressBar = QtWidgets.QProgressBar(Form)
        self.progressBar.setGeometry(QtCore.QRect(70, 540, 621, 41))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setAlignment(QtCore.Qt.AlignCenter)
        self.progressBar.setOrientation(QtCore.Qt.Horizontal)
        self.progressBar.setObjectName("progressBar")
        self.pushButton_7 = QtWidgets.QPushButton(Form)
        self.pushButton_7.setGeometry(QtCore.QRect(640, 570, 93, 28))
        self.pushButton_7.setObjectName("pushButton_7")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Installer"))
        self.pushButton.setText(_translate("Form", "Next"))
        self.pushButton_2.setText(_translate("Form", "Close"))
        self.lineEdit.setText(_translate("Form", "Adress\\"))
        self.label.setText(_translate("Form", "Adress:"))
        self.pushButton_5.setText(_translate("Form", "==>"))
        self.pushButton_6.setText(_translate("Form", "<=="))
        self.label_3.setText(_translate("Form", "Press \"Folders builder.bat\""))
        self.label_4.setText(_translate("Form", "Level one"))
        self.pushButton_7.setText(_translate("Form", "Finish"))
        self.label_3.close()
        self.progressBar.close()
        self.pushButton_7.close()
        self.fs = list(__file__.split('\\'))
        self.fs = '\\'.join(self.fs[:-1])
        self.lineEdit.setText(self.fs)
        self.nuim = 1
        self.level = 1
    def nextimg(self):
        if self.nuim > 3:
            self.nuim = 0
        self.nuim += 1
        pix = QtGui.QPixmap(f'DATA1/{self.nuim}.png')
        self.label_2.setPixmap(pix)
    def lastimg(self):
        if self.nuim < 1:
            self.nuim = 4
        self.nuim -= 1
        pix = QtGui.QPixmap(f'DATA1/{self.nuim}.png')
        self.label_2.setPixmap(pix)
    
    #LEVEL1
    def nextl(self):
        try:
            if self.level == 1:
                
                with open('Folders builder.bat','w') as fbb:
                    ss = self.lineEdit.text()
                    adr = ss
                    if ss[-1] == '/' or ss[-1] == '\\':
                        adr = ss[:-1]
                    if '/' in ss:
                        lss = list(ss.split('/'))
                        ss = '\\'.join(lss)
                        adr1 = lss[0]
                    if '\\' in ss:
                        lss = list(ss.split('\\'))
                        adr1 = lss[0]
                    lfs = list(self.fs.split('\\'))
                    
                    fbb.write(f'{adr1.lower()}\n')
                    fbb.write(f'cd {adr}\n')
                    fbb.write('md Test_maker\n')
                    fbb.write('cd Test_maker\n')
                    fbb.write('md Uper\n')
                    fbb.write('md Ques\n')
                    fbb.write('cd Ques\n')
                    fbb.write('md Azmoon\n')
                    fbb.write('md MUTC_Az\n')
                    fbb.write(f'{lfs[0]}\n')
                    fbb.write(f'cd {self.fs}\\DATA1\n')
                    fbb.write(f'ECHO SS10TRUE>PROM.bat')
                    
                self.lineEdit.close()
                self.label.setText("Now:")
                self.label_3.show()
                self.level += 1
            if self.level == 2:
                print('DEBUG::root:lisence Mac.')
                self.label.setText('Building files...')
                with open('PROM.bat') as prm:
                    self.do = prm.read()
                with open('DATA1/PROM.bat') as prm:
                    self.do1 = prm.read()
                if self.do == 'SS10TRUE\n' or self.do1 == 'SS10TRUE\n':
                    print('DEBUG::root:IOS Activated')
                    self.label_3.close()
                    self.progressBar.show()
                    import time
                    with open(f'{self.lineEdit.text()}\\Test_maker\\adrs.txt','w') as r:
                        p = []
                        self.progressBar.setValue(1)
                        time.sleep(0.5)
                        print('DEBUG::root:Created adrs file')
                    with open(f'{self.lineEdit.text()}\\Test_maker\\adrs-file.txt','w') as r:
                        p = []
                        self.progressBar.setValue(2)
                        time.sleep(0.5)
                        print('DEBUG::root:Created adrs-file file')
                    with open(f'{self.lineEdit.text()}\\Test_maker\\backSpider.txt','w') as r:
                        p = []
                        self.progressBar.setValue(3)
                        time.sleep(0.5)
                        print('DEBUG::root:Created backSpider file')
                    with open(f'{self.lineEdit.text()}\\Test_maker\\intext.txt','w') as r:
                        p = []
                        self.progressBar.setValue(4)
                        time.sleep(0.5)
                        print('DEBUG::root:Created intext file')
                    with open(f'{self.lineEdit.text()}\\Test_maker\\titleOP.txt','w') as r:
                        p = []
                        self.progressBar.setValue(5)
                        time.sleep(0.5)
                        print('DEBUG::root:Created titleOp file')
                    with open(f'{self.lineEdit.text()}\\Test_maker\\round.txt','w') as r:
                        r.write('0')
                        p = []
                        
                        self.progressBar.setValue(6)
                        time.sleep(0.5)
                        print('DEBUG::root:Created round file')
                    self.progressBar.setValue(7)
                    with open(f'{self.lineEdit.text()}\\Test_maker\\brahan.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[0]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created brahan(x) ')
                    self.progressBar.setValue(17)
                    with open(f'{self.lineEdit.text()}\\Test_maker\\Compiler.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[1]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created Compiler(x)')
                    self.progressBar.setValue(23)
                    with open(f'{self.lineEdit.text()}\\Test_maker\\Editor.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[2]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created Editor(x)')
                    self.progressBar.setValue(29)
                    with open(f'{self.lineEdit.text()}\\Test_maker\\home.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[3]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created home(x)')
                    self.progressBar.setValue(35)
                    with open(f'{self.lineEdit.text()}\\Test_maker\\In.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[4]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created In.mutc(x)')
                    self.progressBar.setValue(40)
                    
                    with open(f'{self.lineEdit.text()}\\Test_maker\\Karname.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[5]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created WorkLetter(x)')
                    self.progressBar.setValue(43)
                    
                    with open(f'{self.lineEdit.text()}\\Test_maker\\lsit.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[6]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created lsite(x)')
                    self.progressBar.setValue(48)
                    
                    with open(f'{self.lineEdit.text()}\\Test_maker\\Message.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[7]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created Message(x)')
                    self.progressBar.setValue(49)
                    
                    with open(f'{self.lineEdit.text()}\\Test_maker\\MUTC.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[8]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created MUTC(x)')
                    self.progressBar.setValue(58)
                    
                    with open(f'{self.lineEdit.text()}\\Test_maker\\NamedProject_anatomical.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[9]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created NamedProject_anatomical(x)')
                    self.progressBar.setValue(64)
                    with open(f'{self.lineEdit.text()}\\Test_maker\\NamedProject_Guessy.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[10]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created NamedProject_Guessy(x)')
                    self.progressBar.setValue(68)
                    with open(f'{self.lineEdit.text()}\\Test_maker\\NamedProject_Testical.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[11]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created NamedProject_Test(x)')
                    self.progressBar.setValue(75)
                    
                    with open(f'{self.lineEdit.text()}\\Test_maker\\New.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[12]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created New(x)')
                    self.progressBar.setValue(80)
                    
                    with open(f'{self.lineEdit.text()}\\Test_maker\\Open.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[13]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created Open(x)')
                    self.progressBar.setValue(85)
                    
                    with open(f'{self.lineEdit.text()}\\Test_maker\\Open_.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[14]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created open double(x)')
                    self.progressBar.setValue(90)
                    
                    with open(f'{self.lineEdit.text()}\\Test_maker\\Out.py','w') as r:
                        with open('DATA2/DocxN.txt')as tro:
                            self.files = tro.read()
                        pack = list(self.files.split('^^^'))
                        brahan = pack[15]
                        brahan = list(brahan.split('|WIMC ASA.WW ROOT::WARNING <#><%><@><!><^&><Html>Corner::Out::Fire.sx{2<4,A<B}/sx*staxnet++\n'))
                        brahan = '\n'.join(brahan)
                        r.write(brahan)
                        
                        p = []
                        time.sleep(0.5)
                        print('DEBUG::root:Created Out(x)')
                    self.progressBar.setValue(95)
                    time.sleep(0.5)
                    with open(f'{self.lineEdit.text()}\\Test_maker\\NewRound.tm','w') as r:
                        p = []
                    print('DEBUG::root:end files1 ...')
                    
                    self.progressBar.setValue(98)
                    time.sleep(0.5)
                    print('DEBUG::root:end files2 ...')
                    with open(f'{self.lineEdit.text()}\\Test_maker\\Uper\\List Azmax.txt','w') as r:
                        p = []
                    self.progressBar.setValue(99)
                    
                    time.sleep(0.5)
                    print('DEBUG::root:end files3 ...')
                    self.progressBar.setValue(100)
                    time.sleep(2)
                    self.progressBar.close()
                    self.label.setText('End')
                    font = QtGui.QFont()
                    font.setPointSize(15)
                    self.label_3.setFont(font)
                    self.label_3.setText('Copy "test maker" in installer and paste to location file')
                    self.label_3.show()
                    time.sleep(4)
                    self.pushButton.close()
                    self.pushButton_7.show()
                    self.pushButton_2.close()
                    
                    with open('PROM.bat','w')as pr:
                        pr.write('SSxFalse')
                    with open('DATA1/PROM.bat','w')as pr:
                        pr.write('SSxFalse')
        except:
                print()
                print('ERORR::root:erorr in analisys data')
                print()
                
                
                
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    ui.pushButton_5.clicked.connect(lambda : ui.nextimg())
    ui.pushButton_6.clicked.connect(lambda : ui.lastimg())
    ui.pushButton.clicked.connect(lambda : ui.nextl())
    ui.pushButton_7.clicked.connect(lambda : ui.close())
    ui.pushButton_2.clicked.connect(lambda : ui.close())
    Form.show()
    sys.exit(app.exec_())
