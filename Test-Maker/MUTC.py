# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MUTCp.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1078, 866)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 218, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(247, 236, 208))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 109, 81))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(160, 145, 108))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 218, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(247, 236, 208))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 218, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(247, 236, 208))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 109, 81))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(160, 145, 108))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 218, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(247, 236, 208))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 109, 81))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 218, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(247, 236, 208))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 109, 81))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(160, 145, 108))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 109, 81))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 109, 81))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 218, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 218, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 218, 162))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        Dialog.setPalette(palette)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(40, 350, 1011, 51))
        self.lineEdit.setObjectName("lineEdit")
        self.radioButton_2 = QtWidgets.QRadioButton(Dialog)
        self.radioButton_2.setGeometry(QtCore.QRect(690, 20, 101, 20))
        self.radioButton_2.setObjectName("radioButton_2")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(950, 20, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.textEdit = QtWidgets.QTextEdit(Dialog)
        self.textEdit.setGeometry(QtCore.QRect(10, 60, 1061, 801))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setFamily('Simsun')
        self.textEdit.setFont(font)
        self.textEdit.setObjectName("textEdit")
        self.radioButton = QtWidgets.QRadioButton(Dialog)
        self.radioButton.setGeometry(QtCore.QRect(810, 20, 111, 20))
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName("radioButton")
        self.lineEdit_2 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_2.setGeometry(QtCore.QRect(10, 100, 1011, 51))
        self.lineEdit_2.setObjectName("lineEdit_2")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
    def setRP2(self):
        self.textEdit.setEnabled(False)
    def setRP1(self):
        self.textEdit.setEnabled(True)
    def retranslateUi(self, Dialog):
        
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "MUTC Editor"))
        self.lineEdit.setText(_translate("Dialog", "@Command line"))
        self.lineEdit.close()
        self.radioButton_2.setText(_translate("Dialog", "Deactive"))
        self.pushButton.setText(_translate("Dialog", "Run"))
        self.textEdit.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:7.8pt;\">@Script MUTC</span></p></body></html>"))
        self.radioButton.setText(_translate("Dialog", "Active"))
        self.lineEdit_2.setText(_translate("Dialog", "@Command line"))
        self.lineEdit_2.close()
        self.radioButton_2.clicked.connect(self.setRP2)
        self.radioButton.clicked.connect(self.setRP1)
        
        self.pushButton.clicked.connect(lambda : self.signal())
        self._hard_ = dict(version = '0.1')
        self.hset = {'version'}
        self.Px = 0
        self.piyaz = 0
        self.cls_ = 'no'
        self.intaction = 0
        self.collaction = 0
        self.xloop = 0
    def refrence (self):
        from In import Ui_Dialog
        os = Ui_Dialog()
        dias = QtWidgets.QDialog()
        os.setupUi(dias)
        os.make()
        os.pushButton.clicked.connect(os.make)
        with open('Eder.tm') as tm:
            self.val = tm.read()
        
        dias.exec_()
    def signal(self):
        Code11 = self.textEdit.toPlainText()
        
        Code1 = Code11.split(';\n')
        self.run(Code1)
    def run(self,pack):
        
        Code1 = pack
        
        for Code in Code1:
            if Code[:5] == '%Del:':
                item = Code[5:]
                if item in self.hset:
                    self.hset.remove(item)
                    del self._hard_[item]
                else:
                    from Out import Ui_Dialog
                    ding = Ui_Dialog()
                    font = QtGui.QFont()
                    font.setPointSize(10)
                    diadiss = QtWidgets.QDialog()
                    ding.setupUi(diadiss)
                    ding.label.setFont(font)
                    ding.label.setText(f'Erorr:no variable in the name "{item}"')
                    ding.pushButton.clicked.connect(lambda : diadi.close())
                    diadiss.exec_()
                    
            for _i_ in self.hset:
                span = _i_
                print(span)
                dontez = [' ','`','@','!','#','$','%','^','&','*','(',')','1','2','3'
                          ,'4','5','6','7','8','9','0','-','=','+','*','/','[',']','{','}'
                          ,'\\','|',':',';','"',"'",'?','.',',']
                for i__ in dontez:
                    
                    if i__ in list(span):
                        from Out import Ui_Dialog
                        ding = Ui_Dialog()
                        font = QtGui.QFont()
                        font.setPointSize(10)
                        diadiss = QtWidgets.QDialog()
                        ding.setupUi(diadiss)
                        print(span,'*2')
                        ding.label.setFont(font)
                        ding.label.setText(f"Erorr:Erorr in variable({span}) it is not carrect")
                        ding.pushButton.clicked.connect(lambda : diadi.close())
                        diadiss.exec_()
                        self.intaction -= 1
                        self.collaction -= 1
                        return
            
            if Code == '%StopLine:':
                self.intaction -= 1
                self.collaction -= 1
                return
            if Code == '~startloop:':
                self.xloop = 1
            if Code[:14] == '~target;round:':
                if self.xloop == 1:
                    rounds = Code[14:]
                    if rounds in self.hset:
                        rounds = self._hard_[rounds]
                    if rounds not in ('None','none','0'):
                        Code11 = self.textEdit.toPlainText()
                        
                        Code1 = Code11.split(';\n')
                        a = Code1.index('~startloop:')
                        b = Code1.index(Code)
                        rou = int(rounds)
                        pack = Code1[a:b]
                        for a in range(rou):
                            self.run(pack)
                else:
                    from Out import Ui_Dialog
                    ding = Ui_Dialog()
                    diadi = QtWidgets.QDialog()
                    ding.setupUi(diadi)
                    item = list(Code1)
                    item = item.index(Code)
                    ding.label.setText(f"Erorr:no signal loop")
                    ding.pushButton.clicked.connect(lambda : diadi.close())
                    diadi.exec_()
            if Code[:1] == '=':
                word = Code[1:]
                try:
                    var,val = word.split('<-')
                except:
                    from Out import Ui_Dialog
                    dou = Ui_Dialog()
                    didou = QtWidgets.QDialog()
                    dou.setupUi(didou)
                    dou.label.setText(f"Erorr:(=Variable<-Value) no {word}")
                    didou.exec_()
                    return
                
                if val in self.hset:
                    self._hard_[var] = self._hard_[val]
                    self.hset.add(var)
                
                elif val[:3] == '^+~':
                    item = val[3:]
                    try:
                        ad = list(item.split('+'))
                        add = []
                        for i in ad:
                            if i in self.hset:
                                ii = self._hard_[i]
                                add.append(float(ii))
                            else:
                                add.append(float(i))
                        sumsco = sum(add)
                        self.hset.add(var)
                        self._hard_[var] = str(sumsco)
                    except:
                        from Out import Ui_Dialog
                        ding = Ui_Dialog()
                        diadi = QtWidgets.QDialog()
                        ding.setupUi(diadi)
                        item = list(Code1)
                        item = item.index(Code)
                        ding.label.setText(f"Erorr:erorr in line {item}")
                        ding.pushButton.clicked.connect(lambda : diadi.close())
                        diadi.exec_()
                    
                    
                elif val[:3] == '^-~':
                    try:
                        item = val[3:]
                        ad = list(item.split('-'))
                        add = []
                        for i in ad:
                            if i in self.hset:
                                ii = self._hard_[i]
                                add.append(float(ii))
                            else:
                                add.append(float(i))
                        do = 0
                        for ic in add:
                            if do == 1:
                                self.amal -= ic
                            else:
                                self.amal = ic
                                do += 1
                        
                        self.hset.add(var)
                        self._hard_[var] = str(self.amal)
                    except:
                        from Out import Ui_Dialog
                        ding = Ui_Dialog()
                        diadi = QtWidgets.QDialog()
                        ding.setupUi(diadi)
                        item = list(Code1)
                        item = item.index(Code)
                        ding.label.setText(f"Erorr:erorr in line {item}")
                        ding.pushButton.clicked.connect(lambda : diadi.close())
                        diadi.exec_()
                    
                elif val[:3] == '^*~':
                    try:
                        item = val[3:]
                        ad = list(item.split('*'))
                        add = []
                        for i in ad:
                            if i in self.hset:
                                ii = self._hard_[i]
                                add.append(float(ii))
                            else:
                                add.append(float(i))
                        do = 0
                        for ic in add:
                            if do == 1:
                                self.amal *= ic
                            else:
                                self.amal = ic
                                do += 1
                        
                        self.hset.add(var)
                        self._hard_[var] = str(self.amal)
                    except:
                        from Out import Ui_Dialog
                        ding = Ui_Dialog()
                        diadi = QtWidgets.QDialog()
                        ding.setupUi(diadi)
                        item = list(Code1)
                        item = item.index(Code)
                        ding.label.setText(f"Erorr:erorr in line {item}")
                        ding.pushButton.clicked.connect(lambda : diadi.close())
                        diadi.exec_()
                    
                elif val[:3] == '^/~':
                    try:
                        item = val[3:]
                        ad = list(item.split('/'))
                        add = []
                        for i in ad:
                            if i in self.hset:
                                ii = self._hard_[i]
                                add.append(float(ii))
                            else:
                                add.append(float(i))
                        do = 0
                        for ic in add:
                            if do == 1:
                                self.amal /= ic
                            else:
                                self.amal = ic
                                do += 1
                        
                        self.hset.add(var)
                        self._hard_[var] = str(self.amal)
                    except:
                        from Out import Ui_Dialog
                        ding = Ui_Dialog()
                        diadi = QtWidgets.QDialog()
                        ding.setupUi(diadi)
                        item = list(Code1)
                        item = item.index(Code)
                        ding.label.setText(f"Erorr:erorr in line {item}")
                        ding.pushButton.clicked.connect(lambda : diadi.close())
                        diadi.exec_()
                elif val[:6] == '^Sqrt~':
                    try:
                        item = val[6:]
                        if item in self.hset:
                            item = self._hard_[item]
                        item = float(item)
                        import math
                        item = math.sqrt(item)
                        
                        self.hset.add(var)
                        self._hard_[var] = str(item)
                    except:
                        from Out import Ui_Dialog
                        ding = Ui_Dialog()
                        diadi = QtWidgets.QDialog()
                        ding.setupUi(diadi)
                        item = list(Code1)
                        item = item.index(Code)
                        ding.label.setText(f"Erorr:erorr in line {item}")
                        ding.pushButton.clicked.connect(lambda : diadi.close())
                        diadi.exec_()
                elif val[:3] == '^%~':
                    try:
                        item = val[3:]
                        ad = list(item.split('%'))
                        add = []
                        for i in ad:
                            if i in self.hset:
                                ii = self._hard_[i]
                                add.append(float(ii))
                            else:
                                add.append(float(i))
                        do = 0
                        for ic in add:
                            if do == 1:
                                self.amal %= ic
                            else:
                                self.amal = ic
                                do += 1
                        
                        self.hset.add(var)
                        self._hard_[var] = str(self.amal)
                    except:
                        from Out import Ui_Dialog
                        ding = Ui_Dialog()
                        diadi = QtWidgets.QDialog()
                        ding.setupUi(diadi)
                        item = list(Code1)
                        item = item.index(Code)
                        ding.label.setText(f"Erorr:erorr in line {item}")
                        ding.pushButton.clicked.connect(lambda : diadi.close())
                        diadi.exec_()
                    
                
                    
                        
                else:
                    self.hset.add(var)
                    self._hard_[var] = val
            
            if Code[:15] == '!ifcollections[':
                item = Code[15:-1]
                
                try:
                    small,amal,big = item.split('~')
                    if big in self.hset:
                        big = self._hard_[big]
                    if small[:1] == '*':
                        if small[6:] == '*value':
                            small = small[:6]
                            small = small[1:-1]
                        else:
                            from Out import Ui_Dialog
                            ads = Ui_Dialog()
                            diads = QtWidgets.QDialog()
                            ads.setupUi(diads)
                            ads.label.setText('Erorr:types *value')
                    if small in self.hset:
                        small = self._hard_[small]
                    if big[:1] == '*':
                        if big[12:] == '*collections':
                            big = big[:12]
                            
                        else:
                            from Out import Ui_Dialog
                            ads = Ui_Dialog()
                            diads = QtWidgets.QDialog()
                            ads.setupUi(diads)
                            ads.label.setText('Erorr:types *collections')
                    big = big[1:-1]
                    bigs = list(big.split(','))
                    vig = []
                    for ad in bigs:
                        if ad in self.hset:
                            x = self._hard_[ad]
                        else:
                            x = ad
                        vig.append(x)
                    if amal == 'in':
                        if small in vig:
                            self.collaction = 1
                            print('smallyes')
                    if amal == 'notin':
                        if small not in vig:
                            self.collaction = 1
                            print('collecyes')
                    print(self.collaction)
                except:
                    from Out import Ui_Dialog
                    sds = Ui_Dialog()
                    diasds = QtWidgets.QDialog()
                    sds.setupUi(diasds)
                    sds.label.setText("Erorr:Erorr in formating '1~2~3'")
                    diasds.exec_()
                
            if Code[:3] == 'C>>':
               if self.collaction == 1:
                   itemic = Code[3:]
                   Code = itemic
                   if Code[:5] == '%Del:':
                       item = Code[5:]
                       if item in self.hset:
                           self.hset.remove(item)
                           del self._hard_[item]
                       else:
                           from Out import Ui_Dialog
                           ding = Ui_Dialog()
                           font = QtGui.QFont()
                           font.setPointSize(10)
                           diadiss = QtWidgets.QDialog()
                           ding.setupUi(diadiss)
                           ding.label.setFont(font)
                           ding.label.setText(f'Erorr:no variable in the name "{item}"')
                           ding.pushButton.clicked.connect(lambda : diadi.close())
                           diadiss.exec_()
                   print(itemic,'=====',self.collaction)
                   for Code in Code1:
                       if Code[:5] == '%Del:':
                           item = Code[5:]
                           if item in self.hset:
                               self.hset.remove(item)
                               del self._hard_[item]
                           else:
                               from Out import Ui_Dialog
                               ding = Ui_Dialog()
                               font = QtGui.QFont()
                               font.setPointSize(10)
                               diadiss = QtWidgets.QDialog()
                               ding.setupUi(diadiss)
                               ding.label.setFont(font)
                               ding.label.setText(f'Erorr:no variable in the name "{item}"')
                               ding.pushButton.clicked.connect(lambda : diadi.close())
                               diadiss.exec_()
                   
                                   
                   if itemic == '%StopLine:':
                       self.intaction -= 1
                       self.collaction -= 1
                       return
                   if itemic == 'end':
                       self.collaction -= 1
                   if itemic[:1] == '=':
                       word = itemic[1:]
                       try:
                           var,val = word.split('<-')
                       except:
                           from Out import Ui_Dialog
                           dou = Ui_Dialog()
                           didou = QtWidgets.QDialog()
                           dou.setupUi(didou)
                           dou.label.setText(f"Erorr:(=Variable<-Value) no {word}")
                           didou.exec_()
                           return
                       
                       if val in self.hset:
                           self._hard_[var] = self._hard_[val]
                           self.hset.add(var)
                       
                       elif val[:3] == '^+~':
                           item = val[3:]
                           try:
                               ad = list(item.split('+'))
                               add = []
                               for i in ad:
                                   if i in self.hset:
                                       ii = self._hard_[i]
                                       add.append(float(ii))
                                   else:
                                       add.append(float(i))
                               sumsco = sum(add)
                               self.hset.add(var)
                               self._hard_[var] = str(sumsco)
                           except:
                               from Out import Ui_Dialog
                               ding = Ui_Dialog()
                               diadi = QtWidgets.QDialog()
                               ding.setupUi(diadi)
                               item = list(Code1)
                               item = item.index(Code)
                               ding.label.setText(f"Erorr:erorr in line {item}")
                               ding.pushButton.clicked.connect(lambda : diadi.close())
                               diadi.exec_()
                           
                           
                       elif val[:3] == '^-~':
                           try:
                               item = val[3:]
                               ad = list(item.split('-'))
                               add = []
                               for i in ad:
                                   if i in self.hset:
                                       ii = self._hard_[i]
                                       add.append(float(ii))
                                   else:
                                       add.append(float(i))
                               do = 0
                               for ic in add:
                                   if do == 1:
                                       self.amal -= ic
                                   else:
                                       self.amal = ic
                                       do += 1
                               
                               self.hset.add(var)
                               self._hard_[var] = str(self.amal)
                           except:
                               from Out import Ui_Dialog
                               ding = Ui_Dialog()
                               diadi = QtWidgets.QDialog()
                               ding.setupUi(diadi)
                               item = list(Code1)
                               item = item.index(Code)
                               ding.label.setText(f"Erorr:erorr in line {item}")
                               ding.pushButton.clicked.connect(lambda : diadi.close())
                               diadi.exec_()
                           
                       elif val[:3] == '^*~':
                           try:
                               item = val[3:]
                               ad = list(item.split('*'))
                               add = []
                               for i in ad:
                                   if i in self.hset:
                                       ii = self._hard_[i]
                                       add.append(float(ii))
                                   else:
                                       add.append(float(i))
                               do = 0
                               for ic in add:
                                   if do == 1:
                                       self.amal *= ic
                                   else:
                                       self.amal = ic
                                       do += 1
                               
                               self.hset.add(var)
                               self._hard_[var] = str(self.amal)
                           except:
                               from Out import Ui_Dialog
                               ding = Ui_Dialog()
                               diadi = QtWidgets.QDialog()
                               ding.setupUi(diadi)
                               item = list(Code1)
                               item = item.index(Code)
                               ding.label.setText(f"Erorr:erorr in line {item}")
                               ding.pushButton.clicked.connect(lambda : diadi.close())
                               diadi.exec_()
                           
                       elif val[:3] == '^/~':
                           try:
                               item = val[3:]
                               ad = list(item.split('/'))
                               add = []
                               for i in ad:
                                   if i in self.hset:
                                       ii = self._hard_[i]
                                       add.append(float(ii))
                                   else:
                                       add.append(float(i))
                               do = 0
                               for ic in add:
                                   if do == 1:
                                       self.amal /= ic
                                   else:
                                       self.amal = ic
                                       do += 1
                               
                               self.hset.add(var)
                               self._hard_[var] = str(self.amal)
                           except:
                               from Out import Ui_Dialog
                               ding = Ui_Dialog()
                               diadi = QtWidgets.QDialog()
                               ding.setupUi(diadi)
                               item = list(Code1)
                               item = item.index(Code)
                               ding.label.setText(f"Erorr:erorr in line {item}")
                               ding.pushButton.clicked.connect(lambda : diadi.close())
                               diadi.exec_()
                       elif val[:6] == '^Sqrt~':
                           try:
                               item = val[6:]
                               if item in self.hset:
                                   item = self._hard_[item]
                               item = float(item)
                               import math
                               item = math.sqrt(item)
                               
                               self.hset.add(var)
                               self._hard_[var] = str(item)
                           except:
                               from Out import Ui_Dialog
                               ding = Ui_Dialog()
                               diadi = QtWidgets.QDialog()
                               ding.setupUi(diadi)
                               item = list(Code1)
                               item = item.index(Code)
                               ding.label.setText(f"Erorr:erorr in line {item}")
                               ding.pushButton.clicked.connect(lambda : diadi.close())
                               diadi.exec_()
                       elif val[:3] == '^%~':
                           try:
                               item = val[3:]
                               ad = list(item.split('%'))
                               add = []
                               for i in ad:
                                   if i in self.hset:
                                       ii = self._hard_[i]
                                       add.append(float(ii))
                                   else:
                                       add.append(float(i))
                               do = 0
                               for ic in add:
                                   if do == 1:
                                       self.amal %= ic
                                   else:
                                       self.amal = ic
                                       do += 1
                               
                               self.hset.add(var)
                               self._hard_[var] = str(self.amal)
                           except:
                               from Out import Ui_Dialog
                               ding = Ui_Dialog()
                               diadi = QtWidgets.QDialog()
                               ding.setupUi(diadi)
                               item = list(Code1)
                               item = item.index(Code)
                               ding.label.setText(f"Erorr:erorr in line {item}")
                               ding.pushButton.clicked.connect(lambda : diadi.close())
                               diadi.exec_()
                           
                       
                           
                               
                       else:
                           self.hset.add(var)
                           self._hard_[var] = val
                       
            if Code[:12] == '%OnlyMethod:':
                try:
                    text = self.textEdit.toPlainText()
                    name = Code[12:]
                    if name == '':
                        from Out import Ui_Dialog
                        ding = Ui_Dialog()
                        font = QtGui.QFont()
                        font.setPointSize(10)
                        diadiss = QtWidgets.QDialog()
                        ding.setupUi(diadiss)
                        ding.label.setFont(font)
                        ding.label.setText(f'Erorr:no name for your func')
                        ding.pushButton.clicked.connect(lambda : diadi.close())
                        diadiss.exec_()
                    else:
                        with open(f'Ques/MUTC_Az/{name}.tm','w') as tm:
                            tm.write(text)
                except:
                    
                        from Out import Ui_Dialog
                        ding = Ui_Dialog()
                        font = QtGui.QFont()
                        font.setPointSize(10)
                        diadiss = QtWidgets.QDialog()
                        ding.setupUi(diadiss)
                        ding.label.setFont(font)
                        ding.label.setText(f'no carrect your func name "{name}"')
                        ding.pushButton.clicked.connect(lambda : diadi.close())
                        diadiss.exec_()
            if Code[:7] == '!ifint[':
                item = Code[7:-1]
                try:
                    val1_,amali,val2_ = item.split('~')
                    val1 = []
                    for i in val1_:
                        if i != ' ':
                            val1.append(i)
                    val1 = ''.join(val1)
                    val2 = []
                    for i in val2_:
                        if i != ' ':
                            val2.append(i)
                    val2 = ''.join(val2)
                            
                    if val1 in self.hset:
                        val1 = self._hard_[val1]
                        print(val1,'********************************')
                    if val2 in self.hset:
                        val2 = self._hard_[val2]
                        print(val2,'********************************')
                    
                    if amali == '>':
                        if val1 > val2:
                            self.intaction = 1
                            
                    if amali == '<':
                        if val1 < val2:
                            self.intaction = 1
                    if amali == '=':
                        if val1 == val2:
                            self.intaction = 1
                    if amali == '<=':
                        if val1 <= val2:
                            self.intaction = 1
                    if amali == '>=':
                        if val1 >= val2:
                            self.intaction = 1
                    if amali == '!=':
                        if val1 != val2:
                            self.intaction = 1
                    
                    print(self.intaction)
                except:
                    from Out import Ui_Dialog
                    sds = Ui_Dialog()
                    diasds = QtWidgets.QDialog()
                    sds.setupUi(diasds)
                    sds.label.setText("Erorr:Erorr in formating '1~2~3'")
                    diasds.exec_()
            
            if Code[:5] == 'int>>':
                print('sotaxnet.s')
                if self.intaction == 1:
                    itemic = Code[5:]
                    Code = itemic
                    if Code[:5] == '%Del:':
                        item = Code[5:]
                        if item in self.hset:
                            self.hset.remove(item)
                            del self._hard_[item]
                        else:
                            from Out import Ui_Dialog
                            ding = Ui_Dialog()
                            font = QtGui.QFont()
                            font.setPointSize(10)
                            diadiss = QtWidgets.QDialog()
                            ding.setupUi(diadiss)
                            ding.label.setFont(font)
                            ding.label.setText(f'Erorr:no variable in the name "{item}"')
                            ding.pushButton.clicked.connect(lambda : diadi.close())
                            diadiss.exec_()
                    
                   
                    if Code == '%StopLine:':
                        self.intaction -= 1
                        self.collaction -= 1
                        return
                    if itemic[:1] == '=':
                        word = itemic[1:]
                        try:
                            var,val = word.split('<-')
                        except:
                            from Out import Ui_Dialog
                            dou = Ui_Dialog()
                            didou = QtWidgets.QDialog()
                            dou.setupUi(didou)
                            dou.label.setText(f"Erorr:(=Variable<-Value) no {word}")
                            didou.exec_()
                            return
                        
                        if val in self.hset:
                            self._hard_[var] = self._hard_[val]
                            self.hset.add(var)
                        
                        elif val[:3] == '^+~':
                            item = val[3:]
                            try:
                                ad = list(item.split('+'))
                                add = []
                                for i in ad:
                                    if i in self.hset:
                                        ii = self._hard_[i]
                                        add.append(float(ii))
                                    else:
                                        add.append(float(i))
                                sumsco = sum(add)
                                self.hset.add(var)
                                self._hard_[var] = str(sumsco)
                            except:
                                from Out import Ui_Dialog
                                ding = Ui_Dialog()
                                diadi = QtWidgets.QDialog()
                                ding.setupUi(diadi)
                                item = list(Code1)
                                item = item.index(Code)
                                ding.label.setText(f"Erorr:erorr in line {item}")
                                ding.pushButton.clicked.connect(lambda : diadi.close())
                                diadi.exec_()
                            
                            
                        elif val[:3] == '^-~':
                            try:
                                item = val[3:]
                                ad = list(item.split('-'))
                                add = []
                                for i in ad:
                                    if i in self.hset:
                                        ii = self._hard_[i]
                                        add.append(float(ii))
                                    else:
                                        add.append(float(i))
                                do = 0
                                for ic in add:
                                    if do == 1:
                                        self.amal -= ic
                                    else:
                                        self.amal = ic
                                        do += 1
                                
                                self.hset.add(var)
                                self._hard_[var] = str(self.amal)
                            except:
                                from Out import Ui_Dialog
                                ding = Ui_Dialog()
                                diadi = QtWidgets.QDialog()
                                ding.setupUi(diadi)
                                item = list(Code1)
                                item = item.index(Code)
                                ding.label.setText(f"Erorr:erorr in line {item}")
                                ding.pushButton.clicked.connect(lambda : diadi.close())
                                diadi.exec_()
                            
                        elif val[:3] == '^*~':
                            try:
                                item = val[3:]
                                ad = list(item.split('*'))
                                add = []
                                for i in ad:
                                    if i in self.hset:
                                        ii = self._hard_[i]
                                        add.append(float(ii))
                                    else:
                                        add.append(float(i))
                                do = 0
                                for ic in add:
                                    if do == 1:
                                        self.amal *= ic
                                    else:
                                        self.amal = ic
                                        do += 1
                                
                                self.hset.add(var)
                                self._hard_[var] = str(self.amal)
                            except:
                                from Out import Ui_Dialog
                                ding = Ui_Dialog()
                                diadi = QtWidgets.QDialog()
                                ding.setupUi(diadi)
                                item = list(Code1)
                                item = item.index(Code)
                                ding.label.setText(f"Erorr:erorr in line {item}")
                                ding.pushButton.clicked.connect(lambda : diadi.close())
                                diadi.exec_()
                            
                        elif val[:3] == '^/~':
                            try:
                                item = val[3:]
                                ad = list(item.split('/'))
                                add = []
                                for i in ad:
                                    if i in self.hset:
                                        ii = self._hard_[i]
                                        add.append(float(ii))
                                    else:
                                        add.append(float(i))
                                do = 0
                                for ic in add:
                                    if do == 1:
                                        self.amal /= ic
                                    else:
                                        self.amal = ic
                                        do += 1
                                
                                self.hset.add(var)
                                self._hard_[var] = str(self.amal)
                            except:
                                from Out import Ui_Dialog
                                ding = Ui_Dialog()
                                diadi = QtWidgets.QDialog()
                                ding.setupUi(diadi)
                                item = list(Code1)
                                item = item.index(Code)
                                ding.label.setText(f"Erorr:erorr in line {item}")
                                ding.pushButton.clicked.connect(lambda : diadi.close())
                                diadi.exec_()
                        elif val[:6] == '^Sqrt~':
                            try:
                                item = val[6:]
                                if item in self.hset:
                                    item = self._hard_[item]
                                item = float(item)
                                import math
                                item = math.sqrt(item)
                                
                                self.hset.add(var)
                                self._hard_[var] = str(item)
                            except:
                                from Out import Ui_Dialog
                                ding = Ui_Dialog()
                                diadi = QtWidgets.QDialog()
                                ding.setupUi(diadi)
                                item = list(Code1)
                                item = item.index(Code)
                                ding.label.setText(f"Erorr:erorr in line {item}")
                                ding.pushButton.clicked.connect(lambda : diadi.close())
                                diadi.exec_()
                        elif val[:3] == '^%~':
                            try:
                                item = val[3:]
                                ad = list(item.split('%'))
                                add = []
                                for i in ad:
                                    if i in self.hset:
                                        ii = self._hard_[i]
                                        add.append(float(ii))
                                    else:
                                        add.append(float(i))
                                do = 0
                                for ic in add:
                                    if do == 1:
                                        self.amal %= ic
                                    else:
                                        self.amal = ic
                                        do += 1
                                
                                self.hset.add(var)
                                self._hard_[var] = str(self.amal)
                            except:
                                from Out import Ui_Dialog
                                ding = Ui_Dialog()
                                diadi = QtWidgets.QDialog()
                                ding.setupUi(diadi)
                                item = list(Code1)
                                item = item.index(Code)
                                ding.label.setText(f"Erorr:erorr in line {item}")
                                ding.pushButton.clicked.connect(lambda : diadi.close())
                                diadi.exec_()
                            
                        
                            
                                
                        else:
                            self.hset.add(var)
                            self._hard_[var] = val
                        
                    
                    
            if Code == '#Ocn':
                from Out import Ui_Dialog
                da = Ui_Dialog()
                dial = QtWidgets.QDialog()
                da.setupUi(dial)
                with open('round.txt')as rt:
                    ocn = rt.read()
                da.label.setText(ocn)
                dial.exec_()
            if Code[:4] == '%In:':
                var = Code[4:]
                try:
                    var , mess = var.split(",,")
                    if mess in self.hset:
                        mess = self._hard_[mess]
                    from In import Ui_Dialog as udg
                    rotin = udg()
                    diab = QtWidgets.QDialog()
                    rotin.setupUi(diab)
                    rotin.pushButton.clicked.connect(lambda : rotin.make())
                    rotin.pushButton.clicked.connect(lambda : diab.close())
                    rotin.mess.setText(mess)
                    diab.exec_()
                    with open('intext.txt') as it:
                        self.val = it.read()
                    val = self.val
                    if val in self.hset:
                        self._hard_[var] = self._hard_[val]
                        self.hset.add(var)
                    else:
                        self.hset.add(var)
                        self._hard_[var] = val
                    print(self._hard_)
                except:
                    from Out import Ui_Dialog
                    ding = Ui_Dialog()
                    diadi = QtWidgets.QDialog()
                    ding.setupUi(diadi)
                    ding.label.setText(f"Erorr:'In' is (%In:var,,text)")
                    ding.pushButton.clicked.connect(lambda : diadi.close())
                    diadi.exec_()
                    
                    return
            if Code[:6] == '#Name:':
                if Code[6:] in self.hset:
                    
                    self.name = self._hard_[Code[6:]]
                else:
                    self.name = Code[6:]
                    
            if Code[:6] == '#Type:':
                if Code[6:] in self.hset:
                    self.type_ = self._hard_[Code[6:]]
                else:
                    self.type_ = Code[6:]
                with open('backSpider.txt','w')as bs:
                    bs.write(f'{self.type_}**\n')
            if Code[:7] == '#Scorr:':
                if Code[7:] in self.hset:
                    scorr = self._hard_[Code[7:]]
                else:
                    scorr = Code[7:]
                
                with open('backSpider.txt','a')as bs:
                    bs.write(f'{scorr}**\n')
            if Code[:5] == '#Que:':
                if Code[5:] in self.hset:
                    que = self._hard_[Code[5:]]
                else:
                    que = Code[5:]
                
                with open('backSpider.txt','a') as bs:
                    bs.write(f'{que}**\n')
            if Code[:6] == '#Blad:':
                if Code[6:] in self.hset:
                    blad = self._hard_[Code[6:]]
                else:
                    blad = Code[6:]
                
                with open('backSpider.txt','a') as bs:
                    bs.write(f'{blad}**\n')
            if Code[:5] == '#Img:':
                if Code[5:] in self.hset:
                    img = self._hard_[Code[5:]]
                else:
                    img = Code[5:]
                with open('backSpider.txt','a') as bs:
                    bs.write(f'{img}**\n')
            if Code == '#Next:':
                with open('backSpider.txt','a') as bs:
                    bs.write(']#%>>**\n')
                    bs.write(f'{self.type_}**\n')
            if Code[:5] == '%Out:':
                from Out import Ui_Dialog
                darkob = Ui_Dialog()
                diadar = QtWidgets.QDialog()
                darkob.setupUi(diadar)
                item = Code[5:]
                its = []
                if ',,' in item:
                    nits = list(item.split(',,'))
                    for i in nits:
                        if i in self.hset:
                            its.append(self._hard_[i])
                            print(i)
                        else:
                            its.append(i)
                    print(its)
                    item = ''.join(its)
                    l = []
                if item in self.hset:
                    item = self._hard_[item]
                else:
                    j = []
                darkob.label.setText(item)
                darkob.pushButton.clicked.connect(lambda : diadar.close())
                diadar.exec_()
            try:
                if Code[:len(self.name)+8] == f'#{self.name};Qfont:':
                    self.font = Code[len(self.name)+8:]
                    if self.font in self.hset:
                        self.font = self._hard_[self.font]
                    print('font>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
                    
                if Code[:len(self.name)+8] == f'#{self.name};Qsize:':
                    self.size = Code[len(self.name)+8:]
                    if self.size in self.hset:
                        self.size = self._hard_[self.size]
                    print('size>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
                    
                if Code[:len(self.name)+10] == f'#{self.name};Qcoarse:':
                    self.coa = Code[len(self.name)+10:]
                    if self.coa in self.hset:
                        self.coa = self._hard_[self.coa]
                    print('coa>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
                if Code[:len(self.name)+9] == f'#{self.name};Qclose:':
                    self.cls_ = 'yes'
                    if self.cls_ in self.hset:
                        self.cls_ = self._hard_[self.cls_]
                    print('coa>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
                
                    
            except:
                l = []
                
            #======================================================>Connect.
            if Code == '#Make:':
                self.coa = Code[len(self.name)+7:]
                with open('backSpider.txt')as rt:
                    self.dioul = rt.read()
                with open(f'Ques/Azmoon/{self.name}.tm','w') as tm:
                    tm.write(self.dioul)
                with open('Uper/List Azmax.txt','a')as lam:
                    lam.write(f'{self.name}*%!')
                del self.dioul
                code = self.textEdit.toPlainText()
                with open(f'Ques/MUTC_Az/{self.name}.tm','w') as tm:
                    tm.write(code)
                print('coa>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
            if Code[:9] == '%Connect:':
                self.Connect(Code[9:])
                
            if Code[:5] == '#Run:':
                with open('backSpider.txt')as bst:
                    self.link = bst.read()
                link = list(self.link.split('**\n'))
                if link[0] == 'Test':
                    from NamedProject_Testical import Ui_Dialog
                    uid = Ui_Dialog()
                    dia121 = QtWidgets.QDialog()
                    uid.setupUi(dia121)
                    dia121.setWindowTitle(self.name)
                    uid.map_str(link)
                    uid.Name.append(self.name)
                    uid.maps()
                    
                    font = QtGui.QFont()
                    try:
                        font.setFamily(self.font)
                    except:
                        l = []
                    try:
                        if self.coa == 'Bold':
                            font.setBold(True)
                    except:
                        l = []
                    try:
                        if self.coa == 'Italic':
                            font.setItalic(True)
                    except:
                        l = []
                    try:
                        if self.coa == 'Underline':
                            font.setUnderline(True)
                    except:
                        l = []
                    try:
                        font.setPointSize(float(self.size))
                    except:
                        l = []
                    if self.cls_ == 'yes':
                        uid.plainTextEdit_3.close()
                    else:
                        uid.plainTextEdit_3.show()
                    uid.plainTextEdit_3.setFont(font)
                    
                    
                    dia121.exec_()
                    
                        
                elif link[0] == 'Anatomical':
                    from NamedProject_anatomical import Ui_Dialog
                    uid = Ui_Dialog()
                    dia122 = QtWidgets.QDialog()
                    uid.setupUi(dia122)
                    uid.Name.append(self.name)
                    uid.map_str(link)
                    uid.maps()
                    font = QtGui.QFont()
                    try:
                        font.setFamily(self.font)
                    except:
                        l = []
                    try:
                        if self.coa == 'Bold':
                            font.setBold(True)
                    except:
                        l = []
                    try:
                        if self.coa == 'Italic':
                            font.setItalic(True)
                    except:
                        l = []
                    try:
                        if self.coa == 'Underline':
                            font.setUnderline(True)
                    except:
                        l = []
                    try:
                        font.setPointSize(float(self.size))
                    except:
                        l = []
                    if self.cls_ == 'yes':
                        uid.textEdit.close()
                    else:
                        uid.textEdit.show()
                    uid.textEdit.setFont(font)
                    dia122.exec_()
                    
                elif link[0] == 'Guessy':
                    from NamedProject_Guessy import Ui_Dialog,Name
                    Name.append(self.name)
                    uid = Ui_Dialog()
                    dia122 = QtWidgets.QDialog()
                    uid.setupUi(dia122)
                    uid.map_str(link)
                    uid.maps()
                    font = QtGui.QFont()
                    try:
                        font.setFamily(self.font)
                    except:
                        l = []
                    try:
                        if self.coa == 'Bold':
                            font.setBold(True)
                    except:
                        l = []
                    try:
                        if self.coa == 'Italic':
                            font.setItalic(True)
                    except:
                        l = []
                    try:
                        if self.coa == 'Underline':
                            font.setUnderline(True)
                    except:
                        l = []
                    try:
                        font.setPointSize(float(self.size))
                    except:
                        l = []
                    if self.cls_ == 'yes':
                        uid.textEdit.close()
                    else:
                        uid.textEdit.show()
                    uid.textEdit.setFont(font)
                    dia122.exec_()
                else:
                     from Out import Ui_Dialog
                     ic = Ui_Dialog()
                     diaer = QtWidgets.QDialog()
                     ic.setupUi(diaer)
                     ic.label.setText('Erorr:Erorr in Type class;')
                     ic.pushButton.clicked.connect(diaer.close)
                     diaer.exec_()
        self.intaction -= 1
        self.collaction -= 1
       
    def Connect(self,Code):
            
            try:
                itemSO1X1 = Code
                with open(f'Ques/MUTC_Az/{itemSO1X1}.tm') as fox:
                    self.it = fox.read()
            except:
                self.it = 'a\n2\n4\n'
                from Out import Ui_Dialog
                ding = Ui_Dialog()
                diadi = QtWidgets.QDialog()
                ding.setupUi(diadi)
                ding.label.setText(f"Erorr:no class in house")
                ding.pushButton.clicked.connect(lambda : diadi.close())
                diadi.exec_()
            self.it = list(self.it.split(';\n'))
            Code1 = self.it.copy()
            for Code in self.it:
                if Code[:5] == '%Del:':
                    item = Code[5:]
                    if item in self.hset:
                        self.hset.remove(item)
                        del self._hard_[item]
                    else:
                        from Out import Ui_Dialog
                        ding = Ui_Dialog()
                        font = QtGui.QFont()
                        font.setPointSize(10)
                        diadiss = QtWidgets.QDialog()
                        ding.setupUi(diadiss)
                        ding.label.setFont(font)
                        ding.label.setText(f'Erorr:no variable in the name "{item}"')
                        ding.pushButton.clicked.connect(lambda : diadi.close())
                        diadiss.exec_()
                        
                for _i_ in self.hset:
                    span = _i_
                    print(span)
                    dontez = [' ','`','@','!','#','$','%','^','&','*','(',')','1','2','3'
                              ,'4','5','6','7','8','9','0','-','=','+','*','/','[',']','{','}'
                              ,'\\','|',':',';','"',"'",'?','.',',']
                    for i__ in dontez:
                        
                        if i__ in list(span):
                            from Out import Ui_Dialog
                            ding = Ui_Dialog()
                            font = QtGui.QFont()
                            font.setPointSize(10)
                            diadiss = QtWidgets.QDialog()
                            ding.setupUi(diadiss)
                            print(span,'*2')
                            ding.label.setFont(font)
                            ding.label.setText(f"Erorr:Erorr in variable({span}) it is not carrect")
                            ding.pushButton.clicked.connect(lambda : diadi.close())
                            diadiss.exec_()
                            self.intaction -= 1
                            self.collaction -= 1
                            return
                if Code == '%StopLine:':
                    self.intaction -= 1
                    self.collaction -= 1
                    return
                #======================================================>Connect.
                if Code == '~startloop:':
                    self.xloop = 1
                if Code[:14] == '~target;round:':
                    if self.xloop == 1:
                        rounds = Code[14:]
                        if rounds in self.hset:
                            rounds = self._hard_[rounds]
                        Code11 = self.textEdit.toPlainText()
                        
                        if rounds not in ('None','none','0'):
                            Code11 = self.textEdit.toPlainText()
                            
                            Code1 = Code11.split(';\n')
                            a = Code1.index('~startloop:')
                            b = Code1.index(Code)
                            rou = int(rounds)
                            pack = Code1[a:b]
                            for a in range(rou):
                                self.run(pack)
                    else:
                        from Out import Ui_Dialog
                        ding = Ui_Dialog()
                        diadi = QtWidgets.QDialog()
                        ding.setupUi(diadi)
                        item = list(Code1)
                        item = item.index(Code)
                        ding.label.setText(f"Erorr:not signal loop")
                        ding.pushButton.clicked.connect(lambda : diadi.close())
                        diadi.exec_()
                if Code[:1] == '=':
                    word = Code[1:]
                    
                    try:
                        var,val = word.split('<-')
                    except:
                        from Out import Ui_Dialog
                        dou = Ui_Dialog()
                        didou = QtWidgets.QDialog()
                        dou.setupUi(didou)
                        dou.label.setText(f"Erorr:(=Variable<-Value) no {word}")
                        didou.exec_()
                        return
                    
                    if val in self.hset:
                        self._hard_[var] = self._hard_[val]
                        self.hset.add(var)
                    elif val[:3] == '^%~':
                        try:
                            item = val[3:]
                            ad = list(item.split('%'))
                            add = []
                            for i in ad:
                                if i in self.hset:
                                    ii = self._hard_[i]
                                    add.append(float(ii))
                                else:
                                    add.append(float(i))
                            do = 0
                            for ic in add:
                                if do == 1:
                                    self.amal %= ic
                                else:
                                    self.amal = ic
                                    do += 1
                            
                            self.hset.add(var)
                            self._hard_[var] = str(self.amal)
                        except:
                            from Out import Ui_Dialog
                            ding = Ui_Dialog()
                            diadi = QtWidgets.QDialog()
                            ding.setupUi(diadi)
                            item = list(Code1)
                            item = item.index(Code)
                            ding.label.setText(f"Erorr:erorr in line {item}")
                            ding.pushButton.clicked.connect(lambda : diadi.close())
                            diadi.exec_()
                    elif val[:3] == '^+~':
                        item = val[3:]
                        ad = list(item.split('+'))
                        add = []
                        for i in ad:
                            if i in self.hset:
                                ii = self._hard_[i]
                                add.append(float(ii))
                            else:
                                add.append(float(i))
                        sumsco = sum(add)
                        self.hset.add(var)
                        self._hard_[var] = str(sumsco)
                        
                    elif val[:3] == '^-~':
                        item = val[3:]
                        ad = list(item.split('-'))
                        add = []
                        for i in ad:
                            if i in self.hset:
                                ii = self._hard_[i]
                                add.append(float(ii))
                            else:
                                add.append(float(i))
                        do = 0
                        for ic in add:
                            if do == 1:
                                self.amal -= ic
                            else:
                                self.amal = ic
                                do += 1
                        
                        self.hset.add(var)
                        self._hard_[var] = str(self.amal)
                        
                    elif val[:3] == '^*~':
                        item = val[3:]
                        ad = list(item.split('*'))
                        add = []
                        for i in ad:
                            if i in self.hset:
                                ii = self._hard_[i]
                                add.append(float(ii))
                            else:
                                add.append(float(i))
                        do = 0
                        for ic in add:
                            if do == 1:
                                self.amal *= ic
                            else:
                                self.amal = ic
                                do += 1
                        
                        self.hset.add(var)
                        self._hard_[var] = str(self.amal)
                        
                    elif val[:3] == '^/~':
                        item = val[3:]
                        ad = list(item.split('/'))
                        add = []
                        for i in ad:
                            if i in self.hset:
                                ii = self._hard_[i]
                                add.append(float(ii))
                            else:
                                add.append(float(i))
                        do = 0
                        for ic in add:
                            if do == 1:
                                self.amal /= ic
                            else:
                                self.amal = ic
                                do += 1
                        
                        self.hset.add(var)
                        self._hard_[var] = str(self.amal)
                    elif val[:6] == '^Sqrt~':
                        item = val[6:]
                        if item in self.hset:
                            item = self._hard_[item]
                        item = float(item)
                        import math
                        item = math.sqrt(item)
                        
                        self.hset.add(var)
                        self._hard_[var] = str(item)
                        
                    
                        
                            
                    else:
                        self.hset.add(var)
                        self._hard_[var] = val
                if Code[:15] == '!ifcollections[':
                    item = Code[15:-1]
                    
                    try:
                        small,amal,big = item.split('~')
                        if big in self.hset:
                            big = self._hard_[big]
                        if small[:1] == '*':
                            if small[6:] == '*value':
                                small = small[:6]
                                small = small[1:-1]
                            else:
                                from Out import Ui_Dialog
                                ads = Ui_Dialog()
                                diads = QtWidgets.QDialog()
                                ads.setupUi(diads)
                                ads.label.setText('Erorr:types *value')
                        if small in self.hset:
                            small = self._hard_[small]
                        if big[:1] == '*':
                            if big[12:] == '*collections':
                                big = big[:12]
                                
                            else:
                                from Out import Ui_Dialog
                                ads = Ui_Dialog()
                                diads = QtWidgets.QDialog()
                                ads.setupUi(diads)
                                ads.label.setText('Erorr:types *collections')
                        big = big[1:-1]
                        bigs = list(big.split(','))
                        vig = []
                        for ad in bigs:
                            if ad in self.hset:
                                x = self._hard_[ad]
                            else:
                                x = ad
                            vig.append(x)
                        if amal == 'in':
                            if small in vig:
                                self.collaction = 1
                                print('smallyes')
                        if amal == 'notin':
                            if small not in vig:
                                self.collaction = 1
                                print('collecyes')
                        print(self.collaction)
                    except:
                        from Out import Ui_Dialog
                        sds = Ui_Dialog()
                        diasds = QtWidgets.QDialog()
                        sds.setupUi(diasds)
                        sds.label.setText("Erorr:Erorr in formating '1~2~3'")
                        diasds.exec_()
                if Code[:7] == '!ifint[':
                    item = Code[7:-1]
                    try:
                        val1_,amali,val2_ = item.split('~')
                        val1 = []
                        for i in val1_:
                            if i != ' ':
                                val1.append(i)
                        val1 = ''.join(val1)
                        val2 = []
                        for i in val2_:
                            if i != ' ':
                                val2.append(i)
                        val2 = ''.join(val2)
                                
                        if val1 in self.hset:
                            val1 = self._hard_[val1]
                            print(val1,'********************************')
                        if val2 in self.hset:
                            val2 = self._hard_[val2]
                            print(val2,'********************************')
                        
                        if amali == '>':
                            if val1 > val2:
                                self.intaction = 1
                                
                        if amali == '<':
                            if val1 < val2:
                                self.intaction = 1
                        if amali == '=':
                            if val1 == val2:
                                self.intaction = 1
                        if amali == '<=':
                            if val1 <= val2:
                                self.intaction = 1
                        if amali == '>=':
                            if val1 >= val2:
                                self.intaction = 1
                        if amali == '!=':
                            if val1 != val2:
                                self.intaction = 1
                        
                        print(self.intaction)
                    except:
                        from Out import Ui_Dialog
                        sds = Ui_Dialog()
                        diasds = QtWidgets.QDialog()
                        sds.setupUi(diasds)
                        sds.label.setText("Erorr:Erorr in formating '1~2~3'")
                        diasds.exec_()
                if Code[:3] == 'C>>':
                   if Code[:3] == 'C>>':
                      if self.collaction == 1:
                          itemic = Code[3:]
                          Code = itemic
                          if Code[:5] == '%Del:':
                              item = Code[5:]
                              if item in self.hset:
                                  self.hset.remove(item)
                                  del self._hard_[item]
                              else:
                                  from Out import Ui_Dialog
                                  ding = Ui_Dialog()
                                  font = QtGui.QFont()
                                  font.setPointSize(10)
                                  diadiss = QtWidgets.QDialog()
                                  ding.setupUi(diadiss)
                                  ding.label.setFont(font)
                                  ding.label.setText(f'Erorr:no variable in the name "{item}"')
                                  ding.pushButton.clicked.connect(lambda : diadi.close())
                                  diadiss.exec_()
                          print(itemic,'=====',self.collaction)
                          if Code == '%StopLine:':
                              self.intaction -= 1
                              self.collaction -= 1
                              return
                          
                                          
                          if itemic[:4] == '%In:':
                              try:
                                  var = itemic[4:]
                                  var , mess = var.split(",,")
                                  if mess in self.hset:
                                      mess = self._hard_[mess]
                                  from In import Ui_Dialog as udg
                                  rotin = udg()
                                  diab = QtWidgets.QDialog()
                                  rotin.setupUi(diab)
                                  rotin.pushButton.clicked.connect(lambda : rotin.make())
                                  rotin.pushButton.clicked.connect(lambda : diab.close())
                                  rotin.mess.setText(mess)
                                  diab.exec_()
                                  with open('intext.txt') as it:
                                      self.val = it.read()
                                  val = self.val
                                  if val in self.hset:
                                      self._hard_[var] = self._hard_[val]
                                      self.hset.add(var)
                                  else:
                                      self.hset.add(var)
                                      self._hard_[var] = val
                                  print(self._hard_)
                              except:
                                 from Out import Ui_Dialog
                                 ding = Ui_Dialog()
                                 diadi = QtWidgets.QDialog()
                                 ding.setupUi(diadi)
                                 ding.label.setText(f"Erorr:'In' is (%In:var,,text)")
                                 ding.pushButton.clicked.connect(lambda : diadi.close())
                                 diadi.exec_()
                          if itemic[:5] == '%Out:':
                              from Out import Ui_Dialog
                              darkob = Ui_Dialog()
                              diadar = QtWidgets.QDialog()
                              darkob.setupUi(diadar)
                              item = itemic[5:]
                              its = []
                              if ',,' in item:
                                  nits = list(item.split(',,'))
                                  for i in nits:
                                      if i in self.hset:
                                          its.append(self._hard_[i])
                                          print(i)
                                      else:
                                          its.append(i)
                                  print(its)
                                  item = ''.join(its)
                                  l = []
                              if item in self.hset:
                                  item = self._hard_[item]
                              else:
                                  j = []
                              darkob.label.setText(item)
                              darkob.pushButton.clicked.connect(lambda : diadar.close())
                              diadar.exec_()
                          if itemic == 'end':
                              self.collaction -= 1
                          if itemic[:1] == '=':
                              word = itemic[1:]
                              try:
                                  var,val = word.split('<-')
                              except:
                                  from Out import Ui_Dialog
                                  dou = Ui_Dialog()
                                  didou = QtWidgets.QDialog()
                                  dou.setupUi(didou)
                                  dou.label.setText(f"Erorr:(=Variable<-Value) no {word}")
                                  didou.exec_()
                                  return
                              
                              if val in self.hset:
                                  self._hard_[var] = self._hard_[val]
                                  self.hset.add(var)
                              
                              elif val[:3] == '^+~':
                                  item = val[3:]
                                  try:
                                      ad = list(item.split('+'))
                                      add = []
                                      for i in ad:
                                          if i in self.hset:
                                              ii = self._hard_[i]
                                              add.append(float(ii))
                                          else:
                                              add.append(float(i))
                                      sumsco = sum(add)
                                      self.hset.add(var)
                                      self._hard_[var] = str(sumsco)
                                  except:
                                      from Out import Ui_Dialog
                                      ding = Ui_Dialog()
                                      diadi = QtWidgets.QDialog()
                                      ding.setupUi(diadi)
                                      item = list(Code1)
                                      item = item.index(Code)
                                      ding.label.setText(f"Erorr:erorr in line {item}")
                                      ding.pushButton.clicked.connect(lambda : diadi.close())
                                      diadi.exec_()
                                  
                                  
                              elif val[:3] == '^-~':
                                  try:
                                      item = val[3:]
                                      ad = list(item.split('-'))
                                      add = []
                                      for i in ad:
                                          if i in self.hset:
                                              ii = self._hard_[i]
                                              add.append(float(ii))
                                          else:
                                              add.append(float(i))
                                      do = 0
                                      for ic in add:
                                          if do == 1:
                                              self.amal -= ic
                                          else:
                                              self.amal = ic
                                              do += 1
                                      
                                      self.hset.add(var)
                                      self._hard_[var] = str(self.amal)
                                  except:
                                      from Out import Ui_Dialog
                                      ding = Ui_Dialog()
                                      diadi = QtWidgets.QDialog()
                                      ding.setupUi(diadi)
                                      item = list(Code1)
                                      item = item.index(Code)
                                      ding.label.setText(f"Erorr:erorr in line {item}")
                                      ding.pushButton.clicked.connect(lambda : diadi.close())
                                      diadi.exec_()
                                  
                              elif val[:3] == '^*~':
                                  try:
                                      item = val[3:]
                                      ad = list(item.split('*'))
                                      add = []
                                      for i in ad:
                                          if i in self.hset:
                                              ii = self._hard_[i]
                                              add.append(float(ii))
                                          else:
                                              add.append(float(i))
                                      do = 0
                                      for ic in add:
                                          if do == 1:
                                              self.amal *= ic
                                          else:
                                              self.amal = ic
                                              do += 1
                                      
                                      self.hset.add(var)
                                      self._hard_[var] = str(self.amal)
                                  except:
                                      from Out import Ui_Dialog
                                      ding = Ui_Dialog()
                                      diadi = QtWidgets.QDialog()
                                      ding.setupUi(diadi)
                                      item = list(Code1)
                                      item = item.index(Code)
                                      ding.label.setText(f"Erorr:erorr in line {item}")
                                      ding.pushButton.clicked.connect(lambda : diadi.close())
                                      diadi.exec_()
                                  
                              elif val[:3] == '^/~':
                                  try:
                                      item = val[3:]
                                      ad = list(item.split('/'))
                                      add = []
                                      for i in ad:
                                          if i in self.hset:
                                              ii = self._hard_[i]
                                              add.append(float(ii))
                                          else:
                                              add.append(float(i))
                                      do = 0
                                      for ic in add:
                                          if do == 1:
                                              self.amal /= ic
                                          else:
                                              self.amal = ic
                                              do += 1
                                      
                                      self.hset.add(var)
                                      self._hard_[var] = str(self.amal)
                                  except:
                                      from Out import Ui_Dialog
                                      ding = Ui_Dialog()
                                      diadi = QtWidgets.QDialog()
                                      ding.setupUi(diadi)
                                      item = list(Code1)
                                      item = item.index(Code)
                                      ding.label.setText(f"Erorr:erorr in line {item}")
                                      ding.pushButton.clicked.connect(lambda : diadi.close())
                                      diadi.exec_()
                              elif val[:6] == '^Sqrt~':
                                  try:
                                      item = val[6:]
                                      if item in self.hset:
                                          item = self._hard_[item]
                                      item = float(item)
                                      import math
                                      item = math.sqrt(item)
                                      
                                      self.hset.add(var)
                                      self._hard_[var] = str(item)
                                  except:
                                      from Out import Ui_Dialog
                                      ding = Ui_Dialog()
                                      diadi = QtWidgets.QDialog()
                                      ding.setupUi(diadi)
                                      item = list(Code1)
                                      item = item.index(Code)
                                      ding.label.setText(f"Erorr:erorr in line {item}")
                                      ding.pushButton.clicked.connect(lambda : diadi.close())
                                      diadi.exec_()
                              elif val[:3] == '^%~':
                                  try:
                                      item = val[3:]
                                      ad = list(item.split('%'))
                                      add = []
                                      for i in ad:
                                          if i in self.hset:
                                              ii = self._hard_[i]
                                              add.append(float(ii))
                                          else:
                                              add.append(float(i))
                                      do = 0
                                      for ic in add:
                                          if do == 1:
                                              self.amal %= ic
                                          else:
                                              self.amal = ic
                                              do += 1
                                      
                                      self.hset.add(var)
                                      self._hard_[var] = str(self.amal)
                                  except:
                                      from Out import Ui_Dialog
                                      ding = Ui_Dialog()
                                      diadi = QtWidgets.QDialog()
                                      ding.setupUi(diadi)
                                      item = list(Code1)
                                      item = item.index(Code)
                                      ding.label.setText(f"Erorr:erorr in line {item}")
                                      ding.pushButton.clicked.connect(lambda : diadi.close())
                                      diadi.exec_()
                                  
                              
                                  
                                      
                              else:
                                  self.hset.add(var)
                                  self._hard_[var] = val
                              
                if Code[:5] == 'int>>':
                    print('sotaxnet.s')
                    if self.intaction == 1:
                        itemic = Code[5:]
                        Code = itemic
                        if Code[:5] == '%Del:':
                            item = Code[5:]
                            if item in self.hset:
                                self.hset.remove(item)
                                del self._hard_[item]
                            else:
                                from Out import Ui_Dialog
                                ding = Ui_Dialog()
                                font = QtGui.QFont()
                                font.setPointSize(10)
                                diadiss = QtWidgets.QDialog()
                                ding.setupUi(diadiss)
                                ding.label.setFont(font)
                                ding.label.setText(f'Erorr:no variable in the name "{item}"')
                                ding.pushButton.clicked.connect(lambda : diadi.close())
                                diadiss.exec_()
                        if itemic == '%StopLine:':
                            self.intaction -= 1
                            self.collaction -= 1
                            return
                        if itemic[:1] == '=':
                            word = itemic[1:]
                            try:
                                var,val = word.split('<-')
                            except:
                                from Out import Ui_Dialog
                                dou = Ui_Dialog()
                                didou = QtWidgets.QDialog()
                                dou.setupUi(didou)
                                dou.label.setText(f"Erorr:(=Variable<-Value) no {word}")
                                didou.exec_()
                                return
                            if val in self.hset:
                                self._hard_[var] = self._hard_[val]
                                self.hset.add(var)
                            
                            elif val[:3] == '^+~':
                                item = val[3:]
                                try:
                                    ad = list(item.split('+'))
                                    add = []
                                    for i in ad:
                                        if i in self.hset:
                                            ii = self._hard_[i]
                                            add.append(float(ii))
                                        else:
                                            add.append(float(i))
                                    sumsco = sum(add)
                                    self.hset.add(var)
                                    self._hard_[var] = str(sumsco)
                                except:
                                    from Out import Ui_Dialog
                                    ding = Ui_Dialog()
                                    diadi = QtWidgets.QDialog()
                                    ding.setupUi(diadi)
                                    item = list(Code1)
                                    item = item.index(Code)
                                    ding.label.setText(f"Erorr:erorr in line {item}")
                                    ding.pushButton.clicked.connect(lambda : diadi.close())
                                    diadi.exec_()
                                
                                
                            elif val[:3] == '^-~':
                                try:
                                    item = val[3:]
                                    ad = list(item.split('-'))
                                    add = []
                                    for i in ad:
                                        if i in self.hset:
                                            ii = self._hard_[i]
                                            add.append(float(ii))
                                        else:
                                            add.append(float(i))
                                    do = 0
                                    for ic in add:
                                        if do == 1:
                                            self.amal -= ic
                                        else:
                                            self.amal = ic
                                            do += 1
                                    
                                    self.hset.add(var)
                                    self._hard_[var] = str(self.amal)
                                except:
                                    from Out import Ui_Dialog
                                    ding = Ui_Dialog()
                                    diadi = QtWidgets.QDialog()
                                    ding.setupUi(diadi)
                                    item = list(Code1)
                                    item = item.index(Code)
                                    ding.label.setText(f"Erorr:erorr in line {item}")
                                    ding.pushButton.clicked.connect(lambda : diadi.close())
                                    diadi.exec_()
                                
                            elif val[:3] == '^*~':
                                try:
                                    item = val[3:]
                                    ad = list(item.split('*'))
                                    add = []
                                    for i in ad:
                                        if i in self.hset:
                                            ii = self._hard_[i]
                                            add.append(float(ii))
                                        else:
                                            add.append(float(i))
                                    do = 0
                                    for ic in add:
                                        if do == 1:
                                            self.amal *= ic
                                        else:
                                            self.amal = ic
                                            do += 1
                                    
                                    self.hset.add(var)
                                    self._hard_[var] = str(self.amal)
                                except:
                                    from Out import Ui_Dialog
                                    ding = Ui_Dialog()
                                    diadi = QtWidgets.QDialog()
                                    ding.setupUi(diadi)
                                    item = list(Code1)
                                    item = item.index(Code)
                                    ding.label.setText(f"Erorr:erorr in line {item}")
                                    ding.pushButton.clicked.connect(lambda : diadi.close())
                                    diadi.exec_()
                                
                            elif val[:3] == '^/~':
                                try:
                                    item = val[3:]
                                    ad = list(item.split('/'))
                                    add = []
                                    for i in ad:
                                        if i in self.hset:
                                            ii = self._hard_[i]
                                            add.append(float(ii))
                                        else:
                                            add.append(float(i))
                                    do = 0
                                    for ic in add:
                                        if do == 1:
                                            self.amal /= ic
                                        else:
                                            self.amal = ic
                                            do += 1
                                    
                                    self.hset.add(var)
                                    self._hard_[var] = str(self.amal)
                                except:
                                    from Out import Ui_Dialog
                                    ding = Ui_Dialog()
                                    diadi = QtWidgets.QDialog()
                                    ding.setupUi(diadi)
                                    item = list(Code1)
                                    item = item.index(Code)
                                    ding.label.setText(f"Erorr:erorr in line {item}")
                                    ding.pushButton.clicked.connect(lambda : diadi.close())
                                    diadi.exec_()
                            elif val[:6] == '^Sqrt~':
                                try:
                                    item = val[6:]
                                    if item in self.hset:
                                        item = self._hard_[item]
                                    item = float(item)
                                    import math
                                    item = math.sqrt(item)
                                    
                                    self.hset.add(var)
                                    self._hard_[var] = str(item)
                                except:
                                    from Out import Ui_Dialog
                                    ding = Ui_Dialog()
                                    diadi = QtWidgets.QDialog()
                                    ding.setupUi(diadi)
                                    item = list(Code1)
                                    item = item.index(Code)
                                    ding.label.setText(f"Erorr:erorr in line {item}")
                                    ding.pushButton.clicked.connect(lambda : diadi.close())
                                    diadi.exec_()
                            elif val[:3] == '^%~':
                                try:
                                    item = val[3:]
                                    ad = list(item.split('%'))
                                    add = []
                                    for i in ad:
                                        if i in self.hset:
                                            ii = self._hard_[i]
                                            add.append(float(ii))
                                        else:
                                            add.append(float(i))
                                    do = 0
                                    for ic in add:
                                        if do == 1:
                                            self.amal %= ic
                                        else:
    
                                            self.amal = ic
                                            do += 1
                                    
                                    self.hset.add(var)
                                    self._hard_[var] = str(self.amal)
                                except:
                                    from Out import Ui_Dialog
                                    ding = Ui_Dialog()
                                    diadi = QtWidgets.QDialog()
                                    ding.setupUi(diadi)
                                    item = list(Code1)
                                    item = item.index(Code)
                                    ding.label.setText(f"Erorr:erorr in line {item}")
                                    ding.pushButton.clicked.connect(lambda : diadi.close())
                                    diadi.exec_()
                                
                            
                                
                                    
                            else:
                                self.hset.add(var)
                                self._hard_[var] = val
                           
                        if itemic[:4] == '%In:':
                            try:
                                var = itemic[4:]
                                var , mess = var.split(",,")
                                if mess in self.hset:
                                    mess = self._hard_[mess]
                                from In import Ui_Dialog as udg
                                rotin = udg()
                                diab = QtWidgets.QDialog()
                                rotin.setupUi(diab)
                                rotin.pushButton.clicked.connect(lambda : rotin.make())
                                rotin.pushButton.clicked.connect(lambda : diab.close())
                                rotin.mess.setText(mess)
                                diab.exec_()
                                with open('intext.txt') as it:
                                    self.val = it.read()
                                val = self.val
                                if val in self.hset:
                                    self._hard_[var] = self._hard_[val]
                                    self.hset.add(var)
                                else:
                                    self.hset.add(var)
                                    self._hard_[var] = val
                                print(self._hard_)
                            except:
                                from Out import Ui_Dialog
                                ding = Ui_Dialog()
                                diadi = QtWidgets.QDialog()
                                ding.setupUi(diadi)
                                ding.label.setText(f"Erorr:'In' is (%In:var,,text)")
                                ding.pushButton.clicked.connect(lambda : diadi.close())
                                diadi.exec_()
                        if itemic[:5] == '%Out:':
                            print('staxout.net')
                            from Out import Ui_Dialog
                            darkob = Ui_Dialog()
                            diadar = QtWidgets.QDialog()
                            darkob.setupUi(diadar)
                            item = itemic[5:]
                            its = []
                            if ',,' in item:
                                nits = list(item.split(',,'))
                                for i in nits:
                                    if i in self.hset:
                                        its.append(self._hard_[i])
                                        print(i)
                                    else:
                                        its.append(i)
                                print(its)
                                item = ''.join(its)
                                l = []
                            if item in self.hset:
                                item = self._hard_[item]
                            else:
                                j = []
                            darkob.label.setText(item)
                            darkob.pushButton.clicked.connect(lambda : diadar.close())
                            diadar.exec_()
                        if itemic == 'end':
                            self.intaction -= 1
                    
                if Code == '#Ocn':
                    from Out import Ui_Dialog
                    da = Ui_Dialog()
                    dial = QtWidgets.QDialog()
                    da.setupUi(dial)
                    with open('round.txt')as rt:
                        ocn = rt.read()
                    da.label.setText(ocn)
                    dial.exec_()
                if Code[:4] == '%In:':
                    try:
                        var = Code[4:]
                        var , mess = var.split(",,")
                        if mess in self.hset:
                            mess = self._hard_[mess]
                        from In import Ui_Dialog as udg
                        rotin = udg()
                        diab = QtWidgets.QDialog()
                        rotin.setupUi(diab)
                        rotin.pushButton.clicked.connect(lambda : rotin.make())
                        rotin.pushButton.clicked.connect(lambda : diab.close())
                        rotin.mess.setText(mess)
                        diab.exec_()
                        with open('intext.txt') as it:
                            self.val = it.read()
                        val = self.val
                        if val in self.hset:
                            self._hard_[var] = self._hard_[val]
                            self.hset.add(var)
                        else:
                            self.hset.add(var)
                            self._hard_[var] = val
                        print(self._hard_)
                    except:
                        from Out import Ui_Dialog
                        ding = Ui_Dialog()
                        diadi = QtWidgets.QDialog()
                        ding.setupUi(diadi)
                        ding.label.setText(f"Erorr:'In' is (%In:var,,text)")
                        ding.pushButton.clicked.connect(lambda : diadi.close())
                        diadi.exec_()
                if Code[:6] == '#Name:':
                    if Code[6:] in self.hset:
                        
                        self.name = self._hard_[Code[6:]]
                    else:
                        self.name = Code[6:]
                        
                if Code[:6] == '#Type:':
                    if Code[6:] in self.hset:
                        self.type_ = self._hard_[Code[6:]]
                    else:
                        self.type_ = Code[6:]
                    with open('backSpider.txt','w')as bs:
                        bs.write(f'{self.type_}**\n')
                if Code[:7] == '#Scorr:':
                    if Code[7:] in self.hset:
                        scorr = self._hard_[Code[7:]]
                    else:
                        scorr = Code[7:]
                    
                    with open('backSpider.txt','a')as bs:
                        bs.write(f'{scorr}**\n')
                if Code[:5] == '#Que:':
                    if Code[5:] in self.hset:
                        que = self._hard_[Code[5:]]
                    else:
                        que = Code[5:]
                    
                    with open('backSpider.txt','a') as bs:
                        bs.write(f'{que}**\n')
                if Code[:6] == '#Blad:':
                    if Code[6:] in self.hset:
                        blad = self._hard_[Code[6:]]
                    else:
                        blad = Code[6:]
                    
                    with open('backSpider.txt','a') as bs:
                        bs.write(f'{blad}**\n')
                if Code[:5] == '#Img:':
                    if Code[5:] in self.hset:
                        img = self._hard_[Code[5:]]
                    else:
                        img = Code[5:]
                    with open('backSpider.txt','a') as bs:
                        bs.write(f'{img}**\n')
                if Code == '#Next:':
                    with open('backSpider.txt','a') as bs:
                        bs.write(']#%>>**\n')
                        bs.write(f'{self.type_}**\n')
                if Code[:5] == '%Out:':
                    from Out import Ui_Dialog
                    darkob = Ui_Dialog()
                    diadar = QtWidgets.QDialog()
                    darkob.setupUi(diadar)
                    item = Code[5:]
                    its = []
                    if ',,' in item:
                        nits = list(item.split(',,'))
                        for i in nits:
                            if i in self.hset:
                                its.append(self._hard_[i])
                                print(i)
                            else:
                                its.append(i)
                        print(its)
                        item = ''.join(its)
                        l = []
                    if item in self.hset:
                        item = self._hard_[item]
                    else:
                        j = []
                    darkob.label.setText(item)
                    darkob.pushButton.clicked.connect(lambda : diadar.close())
                    diadar.exec_()
                try:
                    if Code[:len(self.name)+8] == f'#{self.name};Qfont:':
                        self.font = Code[len(self.name)+8:]
                        if self.font in self.hset:
                            self.font = self._hard_[self.font]
                        print('font>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
                        
                    if Code[:len(self.name)+8] == f'#{self.name};Qsize:':
                        self.size = Code[len(self.name)+8:]
                        if self.size in self.hset:
                            self.size = self._hard_[self.size]
                        print('size>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
                        
                    if Code[:len(self.name)+10] == f'#{self.name};Qcoarse:':
                        self.coa = Code[len(self.name)+10:]
                        if self.coa in self.hset:
                            self.coa = self._hard_[self.coa]
                        print('coa>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
                    if Code[:len(self.name)+9] == f'#{self.name};Qclose:':
                        self.cls_ = 'yes'
                        if self.cls_ in self.hset:
                            self.cls_ = self._hard_[self.cls_]
                        print('coa>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
                except:
                    l = []
                    
                
                
                    
                if Code[:5] == '#Run:':
                    with open('backSpider.txt')as bst:
                        self.link = bst.read()
                    link = list(self.link.split('**\n'))
                    if link[0] == 'Test':
                        from NamedProject_Testical import Ui_Dialog
                        uid = Ui_Dialog()
                        dia121 = QtWidgets.QDialog()
                        uid.setupUi(dia121)
                        dia121.setWindowTitle(self.name)
                        uid.map_str(link)
                        uid.Name.append(self.name)
                        uid.maps()
                        
                        font = QtGui.QFont()
                        try:
                            font.setFamily(self.font)
                        except:
                            l = []
                        try:
                            if self.coa == 'Bold':
                                font.setBold(True)
                        except:
                            l = []
                        try:
                            if self.coa == 'Italic':
                                font.setItalic(True)
                        except:
                            l = []
                        try:
                            if self.coa == 'Underline':
                                font.setUnderline(True)
                        except:
                            l = []
                        try:
                            font.setPointSize(float(self.size))
                        except:
                            l = []
                        if self.cls_ == 'yes':
                            uid.plainTextEdit_3.close()
                        else:
                            uid.plainTextEdit_3.show()
                        uid.plainTextEdit_3.setFont(font)
                        
                        
                        dia121.exec_()
                        
                            
                    elif link[0] == 'Anatomical':
                        from NamedProject_anatomical import Ui_Dialog
                        uid = Ui_Dialog()
                        dia122 = QtWidgets.QDialog()
                        uid.setupUi(dia122)
                        uid.Name.append(self.name)
                        uid.map_str(link)
                        uid.maps()
                        font = QtGui.QFont()
                        try:
                            font.setFamily(self.font)
                        except:
                            l = []
                        try:
                            if self.coa == 'Bold':
                                font.setBold(True)
                        except:
                            l = []
                        try:
                            if self.coa == 'Italic':
                                font.setItalic(True)
                        except:
                            l = []
                        try:
                            if self.coa == 'Underline':
                                font.setUnderline(True)
                        except:
                            l = []
                        try:
                            font.setPointSize(float(self.size))
                        except:
                            l = []
                        if self.cls_ == 'yes':
                            uid.textEdit.close()
                        else:
                            uid.textEdit.show()
                        uid.textEdit.setFont(font)
                        dia122.exec_()
                        
                    elif link[0] == 'Guessy':
                        from NamedProject_Guessy import Ui_Dialog,Name
                        Name.append(self.name)
                        uid = Ui_Dialog()
                        dia122 = QtWidgets.QDialog()
                        uid.setupUi(dia122)
                        uid.map_str(link)
                        uid.maps()
                        font = QtGui.QFont()
                        try:
                            font.setFamily(self.font)
                        except:
                            l = []
                        try:
                            if self.coa == 'Bold':
                                font.setBold(True)
                        except:
                            l = []
                        try:
                            if self.coa == 'Italic':
                                font.setItalic(True)
                        except:
                            l = []
                        try:
                            if self.coa == 'Underline':
                                font.setUnderline(True)
                        except:
                            l = []
                        try:
                            font.setPointSize(float(self.size))
                        except:
                            l = []
                        if self.cls_ == 'yes':
                            uid.textEdit.close()
                        else:
                            uid.textEdit.show()
                        uid.textEdit.setFont(font)
                        dia122.exec_()
                    else:
                         from Out import Ui_Dialog
                         ic = Ui_Dialog()
                         diaer = QtWidgets.QDialog()
                         ic.setupUi(diaer)
                         ic.label.setText('Erorr:Erorr in Type class;')
                         ic.pushButton.clicked.connect(diaer.close)
                         diaer.exec_()
                self.intaction -= 1
                self.collaction -= 1        
                
            
           
            


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
